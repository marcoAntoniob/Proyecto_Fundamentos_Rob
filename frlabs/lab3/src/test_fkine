#!/usr/bin/env python3
import rospy
from sensor_msgs.msg import JointState

from markers import *
from lab3functions import *

if __name__ == '__main__':

  rospy.init_node("testForwardKinematics")
  pub = rospy.Publisher('joint_states', JointState, queue_size=1)
  bmarker = BallMarker(color['GREEN'])

  # Joint names
  jnames = ['base_link1', 'link1_link2', 'link2_link3','link3_link4', 'link4_link5', 'link5_link6','link6_link7']
  # Joint Configuration
  #q = [2, 2, 2, 2, 2, 2,2]
  #q = [-1, 0.8, 0.2, 0.2, 0.7, 0.8,0.4]
  #q = [0, 0, 0, 0., 1.2, 0.,0.]
  q = [0, 0,0, 0, 0, 0,0]
  # End effector with respect to the base
  T = fkine_es200(q)
  print( np.round(T, 3) )
  bmarker.position(T)

  # Object (message) whose type is JointState
  jstate = JointState()
  # Set values to the message
  jstate.header.stamp = rospy.Time.now()
  jstate.name = jnames
  # Add the head joint value (with value 0) to the joints
  jstate.position = q

  # Loop rate (in Hz)
  rate = rospy.Rate(20)
  # Continuous execution loop
  while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Publish the message
    pub.publish(jstate)
    bmarker.publish()
    # Wait for the next iteration
    rate.sleep()
